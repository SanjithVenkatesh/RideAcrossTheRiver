#Sanjith Venkatesh 20038520
#Project 3 outputs module:
#A module that implements the various outputs. Each kind of output that can be generated by the program must be implemented as a separate class

import json
from connection import Connection

class OutputGenerator:

    # Supplies output generators for given list of output tasks    
    def getOutputGens(self, outputs):
        outputGens = []
        for output in outputs:
            outputTask = output.lower()
            if outputTask == "steps":
                outputGens.append(Steps())
            elif outputTask == "latlong":
                outputGens.append(LatLong())
            elif outputTask == "totaltime":
                outputGens.append(TotalTime())
            elif outputTask == "totaldistance":
                outputGens.append(TotalDistance())
            elif outputTask == "elevation":
                outputGens.append(Elevation())
        return outputGens

# Output Generator classes.
# These classes define the same function printdata to return its appropriate output to be printed
# They all have the same signature and return value, which is a list

class Steps:
    # returns list of directions step by step from the supplied JSON data
    def printdata(self, json_list):
        returnlist = []
        returnlist.append("DIRECTIONS")
        print()
        first = 0
        for json in json_list['route']['legs']:
            for direction in json['maneuvers']:
                returnlist.append(direction['narrative'])
        return returnlist

class Elevation:
    # returns list of elevation data from the supplied JSON data
    # makes seperate url request to Elevation api and gets elevation data
    def printdata(self, json_list):
        returnlist = []
        returnlist.append("ELEVATION")
        c = Connection()
        latlonginfo = c.getlatlonginfo(json_list) 
        elevationurl = c.getelevationurls(latlonginfo)
        elevationjson = c.get_info_elevation(elevationurl)
        for locs in elevationjson:
            for elevation in locs['elevationProfile']:
                returnlist.append(elevation['height'])
        return returnlist

class LatLong:
    # returns list of latitude and longitude from the supplied JSON data
    def printdata(self, json_list):
        returnlist = []
        returnlist.append("LATLONGS")
        for json in json_list['route']['locations']:
            lat = json['displayLatLng']['lat']
            long = json['displayLatLng']['lng']
            if (lat >= 0):
                lat = str("{:}N".format(round(lat,2)))
            else:
                lat = str("{:}S".format(str(round(lat, 2)).replace("=", "")), end = " ")
            if(long >= 0):
                long = str("{:}E".format(round(long, 2)))
            else:
                long = str("{:}W".format(str(round(long, 2)).replace("-", "")))
            returnlist.append(str(lat)+" "+str(long))
        return returnlist

class TotalTime:
    # returns list of total time needed to get to all locations from the supplied JSON data
    def printdata(self, json_list):
        returnlist = []
        returnlist.append(str("TOTAL TIME: " + str(round((json_list['route']['time'])/60)) + " minutes"))
        return returnlist

class TotalDistance:
    # returns list of total distance between all locations from the supplied JSON data
    def printdata(self, json_list):
        returnlist = []
        returnlist.append(str("TOTAL DISTANCE: " + str(int((json_list['route']['distance']))) + " miles"))
        return returnlist




                      
